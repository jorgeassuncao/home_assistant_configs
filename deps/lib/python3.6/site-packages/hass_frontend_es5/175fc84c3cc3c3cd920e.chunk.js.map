{"version":3,"sources":["webpack:///./src/common/dom/setup-leaflet-map.js","webpack:///./src/panels/map/ha-entity-marker.js","webpack:///./src/panels/map/ha-panel-map.js"],"names":["setupLeafletMap","mapElement","map","leaflet__WEBPACK_IMPORTED_MODULE_0___default","a","style","document","createElement","setAttribute","parentNode","appendChild","setView","tileLayer","Browser","retina","attribution","subdomains","minZoom","maxZoom","addTo","HaEntityMarker","Object","_mixins_events_mixin_js__WEBPACK_IMPORTED_MODULE_3__","_polymer_polymer_polymer_element_js__WEBPACK_IMPORTED_MODULE_2__","_createClass","key","value","_this2","this","prototype","__proto__","getPrototypeOf","call","addEventListener","ev","badgeTap","stopPropagation","entityId","fire","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_1__","_templateObject","hass","type","String","entityName","entityPicture","customElements","define","leaflet__WEBPACK_IMPORTED_MODULE_3___default","Icon","Default","imagePath","HaPanelMap","_mixins_localize_mixin_js__WEBPACK_IMPORTED_MODULE_9__","_map","_common_dom_setup_leaflet_map_js__WEBPACK_IMPORTED_MODULE_10__","$","drawEntities","setTimeout","invalidateSize","fitMap","remove","bounds","_mapItems","length","LatLng","config","latitude","longitude","latLngBounds","item","getLatLng","fitBounds","pad","forEach","marker","mapItems","keys","states","entity","title","_common_entity_compute_state_name_js__WEBPACK_IMPORTED_MODULE_8__","attributes","hidden","_common_entity_compute_state_domain_js__WEBPACK_IMPORTED_MODULE_7__","state","icon","passive","iconHTML","el","outerHTML","divIcon","html","iconSize","className","push","interactive","circle","color","radius","entity_picture","split","part","substr","join","entity_id","gps_accuracy","observer","narrow","Boolean","showMenu"],"mappings":"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","file":"175fc84c3cc3c3cd920e.chunk.js","sourcesContent":["import Leaflet from 'leaflet';\n\n// Sets up a Leaflet map on the provided DOM element\nexport default function setupLeafletMap(mapElement) {\n  const map = Leaflet.map(mapElement);\n  const style = document.createElement('link');\n  style.setAttribute('href', '/static/images/leaflet/leaflet.css');\n  style.setAttribute('rel', 'stylesheet');\n  mapElement.parentNode.appendChild(style);\n  map.setView([51.505, -0.09], 13);\n  Leaflet.tileLayer(\n    `https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}${Leaflet.Browser.retina ? '@2x.png' : '.png'}`,\n    {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: 'abcd',\n      minZoom: 0,\n      maxZoom: 20,\n    }\n  ).addTo(map);\n\n  return map;\n}\n","import '@polymer/iron-image/iron-image.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport EventsMixin from '../../mixins/events-mixin.js';\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaEntityMarker extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style include=\"iron-positioning\"></style>\n    <style>\n    .marker {\n      vertical-align: top;\n      position: relative;\n      display: block;\n      margin: 0 auto;\n      width: 2.5em;\n      text-align: center;\n      height: 2.5em;\n      line-height: 2.5em;\n      font-size: 1.5em;\n      border-radius: 50%;\n      border: 0.1em solid var(--ha-marker-color, var(--default-primary-color));\n      color: rgb(76, 76, 76);\n      background-color: white;\n    }\n    iron-image {\n      border-radius: 50%;\n    }\n    </style>\n\n    <div class=\"marker\">\n      <template is=\"dom-if\" if=\"[[entityName]]\">[[entityName]]</template>\n      <template is=\"dom-if\" if=\"[[entityPicture]]\">\n        <iron-image sizing=\"cover\" class=\"fit\" src=\"[[entityPicture]]\"></iron-image>\n      </template>\n    </div>\n`;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      entityId: {\n        type: String,\n        value: '',\n      },\n\n      entityName: {\n        type: String,\n        value: null,\n      },\n\n      entityPicture: {\n        type: String,\n        value: null,\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener('click', ev => this.badgeTap(ev));\n  }\n\n  badgeTap(ev) {\n    ev.stopPropagation();\n    if (this.entityId) {\n      this.fire('hass-more-info', { entityId: this.entityId });\n    }\n  }\n}\n\ncustomElements.define('ha-entity-marker', HaEntityMarker);\n","import '@polymer/app-layout/app-toolbar/app-toolbar.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport Leaflet from 'leaflet';\n\nimport '../../components/ha-menu-button.js';\nimport '../../components/ha-icon.js';\n\nimport './ha-entity-marker.js';\n\nimport computeStateDomain from '../../common/entity/compute_state_domain.js';\nimport computeStateName from '../../common/entity/compute_state_name.js';\nimport LocalizeMixin from '../../mixins/localize-mixin.js';\nimport setupLeafletMap from '../../common/dom/setup-leaflet-map.js';\n\nLeaflet.Icon.Default.imagePath = '/static/images/leaflet';\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaPanelMap extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style include=\"ha-style\">\n      #map {\n        height: calc(100% - 64px);\n        width: 100%;\n        z-index: 0;\n      }\n    </style>\n\n    <app-toolbar>\n      <ha-menu-button narrow='[[narrow]]' show-menu='[[showMenu]]'></ha-menu-button>\n      <div main-title>[[localize('panel.map')]]</div>\n    </app-toolbar>\n\n    <div id='map'></div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n        observer: 'drawEntities',\n      },\n\n      narrow: {\n        type: Boolean,\n      },\n\n      showMenu: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    var map = this._map = setupLeafletMap(this.$.map);\n\n    this.drawEntities(this.hass);\n\n    setTimeout(() => {\n      map.invalidateSize();\n      this.fitMap();\n    }, 1);\n  }\n\n  disconnectedCallback() {\n    if (this._map) {\n      this._map.remove();\n    }\n  }\n\n  fitMap() {\n    var bounds;\n\n    if (this._mapItems.length === 0) {\n      this._map.setView(\n        new Leaflet.LatLng(this.hass.config.latitude, this.hass.config.longitude),\n        14\n      );\n    } else {\n      bounds = new Leaflet.latLngBounds(this._mapItems.map(item => item.getLatLng()));\n      this._map.fitBounds(bounds.pad(0.5));\n    }\n  }\n\n  drawEntities(hass) {\n    /* eslint-disable vars-on-top */\n    var map = this._map;\n    if (!map) return;\n\n    if (this._mapItems) {\n      this._mapItems.forEach(function (marker) { marker.remove(); });\n    }\n    var mapItems = this._mapItems = [];\n\n    Object.keys(hass.states).forEach(function (entityId) {\n      var entity = hass.states[entityId];\n      var title = computeStateName(entity);\n\n      if ((entity.attributes.hidden &&\n          computeStateDomain(entity) !== 'zone') ||\n          entity.state === 'home' ||\n          !('latitude' in entity.attributes) ||\n          !('longitude' in entity.attributes)) {\n        return;\n      }\n\n      var icon;\n\n      if (computeStateDomain(entity) === 'zone') {\n        // DRAW ZONE\n        if (entity.attributes.passive) return;\n\n        // create icon\n        var iconHTML = '';\n        if (entity.attributes.icon) {\n          const el = document.createElement('ha-icon');\n          el.setAttribute('icon', entity.attributes.icon);\n          iconHTML = el.outerHTML;\n        } else {\n          iconHTML = title;\n        }\n\n        icon = Leaflet.divIcon({\n          html: iconHTML,\n          iconSize: [24, 24],\n          className: '',\n        });\n\n        // create market with the icon\n        mapItems.push(Leaflet.marker(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            icon: icon,\n            interactive: false,\n            title: title,\n          }\n        ).addTo(map));\n\n        // create circle around it\n        mapItems.push(Leaflet.circle(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            interactive: false,\n            color: '#FF9800',\n            radius: entity.attributes.radius,\n          }\n        ).addTo(map));\n\n        return;\n      }\n\n      // DRAW ENTITY\n      // create icon\n      var entityPicture = entity.attributes.entity_picture || '';\n      var entityName = title.split(' ').map(function (part) { return part.substr(0, 1); }).join('');\n      /* Leaflet clones this element before adding it to the map. This messes up\n         our Polymer object and we can't pass data through. Thus we hack like this. */\n      icon = Leaflet.divIcon({\n        html: \"<ha-entity-marker entity-id='\" + entity.entity_id + \"' entity-name='\" + entityName + \"' entity-picture='\" + entityPicture + \"'></ha-entity-marker>\",\n        iconSize: [45, 45],\n        className: '',\n      });\n\n      // create market with the icon\n      mapItems.push(Leaflet.marker(\n        [entity.attributes.latitude, entity.attributes.longitude],\n        {\n          icon: icon,\n          title: computeStateName(entity),\n        }\n      ).addTo(map));\n\n      // create circle around if entity has accuracy\n      if (entity.attributes.gps_accuracy) {\n        mapItems.push(Leaflet.circle(\n          [entity.attributes.latitude, entity.attributes.longitude],\n          {\n            interactive: false,\n            color: '#0288D1',\n            radius: entity.attributes.gps_accuracy,\n          }\n        ).addTo(map));\n      }\n    });\n  }\n}\n\ncustomElements.define('ha-panel-map', HaPanelMap);\n"],"sourceRoot":""}